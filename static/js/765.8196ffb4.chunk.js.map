{"version":3,"file":"static/js/765.8196ffb4.chunk.js","mappings":"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","sources":["components/Logo/Logo.tsx","pages/Login/Login.tsx","utils/makeRequest.ts"],"sourcesContent":["import \"./Logo.scss\";\n\nconst Logo = () => {\n  return <div className=\"logo\">GeekInsider</div>;\n};\n\nexport default Logo;\n","import React, { useState } from \"react\";\nimport { Form, Input, Button, Modal, notification } from \"antd\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\n\nimport { LoginFormSubmitTypes } from \"./types\";\nimport API from \"../../utils/makeRequest\";\nimport Logo from \"../../components/Logo\";\n\nimport \"./Login.scss\";\n\nconst Login: React.FC = () => {\n  const [loginLoading, setLoginLoading] = useState<boolean>(false);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const signIn = async (user: string, pass: string) => {\n    const result = await API.auth(\"signin\", {\n      email: user,\n      password: pass,\n    });\n    return result;\n  };\n\n  const signInFunc = async (values: LoginFormSubmitTypes) => {\n    const { username, password } = values;\n    try {\n      setLoginLoading(true);\n      const resp = await signIn(username, password);\n      if (resp?.errors) {\n        setLoginLoading(false);\n        notification.error({\n          message: resp.errors?.message,\n        });\n        return;\n      }\n      const type =\n        resp.user.role === \"userCandidate\" ? \"candidate\" : \"recruiter\";\n      dispatch({\n        type: \"SET_USER_TYPE\",\n        payload: type,\n      });\n      dispatch({\n        type: \"SET_AUTH\",\n        payload: true,\n      });\n      localStorage.setItem(\"access_token\", resp.token);\n      localStorage.setItem(\"user\", JSON.stringify(resp.user));\n      setLoginLoading(false);\n      navigate(\"/home\");\n    } catch (e: any) {\n      setLoginLoading(false);\n      if (e?.code === \"UserNotFoundException\") {\n        notification.error({\n          message: e?.message,\n        });\n      }\n    }\n  };\n\n  const setSignUpModalVisible = () => navigate(\"/signup\");\n\n  const handleCandidateSubmit = (values: LoginFormSubmitTypes) => {\n    signInFunc(values);\n    dispatch({\n      type: \"SET_USER_TYPE\",\n      payload: \"candidate\",\n    });\n  };\n\n  return (\n    <Modal\n      open={true}\n      maskClosable={false}\n      closable={false}\n      bodyStyle={{ padding: \"40px\" }}\n      width=\"420px\"\n      footer={null}\n      centered\n    >\n      <Logo />\n      <Form\n        onFinish={handleCandidateSubmit}\n        initialValues={{\n          username: \"itvxqzahzcuhxrhete@uivvn.net\",\n          password: \"pass@123\",\n        }}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your username!\",\n              type: \"email\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Email\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block loading={loginLoading}>\n            Login\n          </Button>\n        </Form.Item>\n        {/* <Form.Item>\n          <Button htmlType=\"submit\" block onClick={signInWithGoogle}>\n            Sign in with Google\n          </Button>\n        </Form.Item> */}\n        <Form.Item wrapperCol={{ span: 20 }}>\n          <div className=\"login__otherlinks\">\n            Not having an account? &nbsp;\n            <a onClick={setSignUpModalVisible}>Sign up</a>\n          </div>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default Login;\n","const baseUrl = \"http://localhost:3005\";\n// const baseUrl = \"http://3.131.169.145\";\n// const baseUrl = \"http://geekinsider.in\";\n\n// if (process.env.NODE_ENV === \"production\") {\n//   baseUrl = process.env.BASE_URL;\n// }\n\nconst getHeader = () => {\n  return {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n  };\n};\n\nexport default {\n  async auth(URL: string, values: any) {\n    return fetch(`${baseUrl}/api/auth/${URL}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(values),\n    }).then((response) => response.json());\n  },\n  async get(URL: string) {\n    return fetch(`${baseUrl}${URL}`, {\n      method: \"GET\",\n      headers: getHeader(),\n    }).then((response) => response.json());\n  },\n\n  async post(URL: string, values: any) {\n    return fetch(`${baseUrl}${URL}`, {\n      method: \"POST\",\n      headers: getHeader(),\n      body: JSON.stringify(values),\n    }).then((response) => response.json());\n  },\n\n  async put(URL: string, values: any) {\n    return fetch(`${baseUrl}${URL}`, {\n      method: \"PUT\",\n      headers: getHeader(),\n      body: JSON.stringify(values),\n    }).then((response) => response.json());\n  },\n\n  async delete(URL: string, values: any) {\n    return fetch(`${baseUrl}${URL}`, {\n      method: \"DELETE\",\n      headers: getHeader(),\n      body: JSON.stringify(values),\n    }).then((response) => response.json());\n  },\n};\n"],"names":["className","useState","loginLoading","setLoginLoading","navigate","useNavigate","dispatch","useDispatch","signIn","user","pass","API","email","password","result","signInFunc","values","username","resp","errors","notification","message","type","role","payload","localStorage","setItem","token","JSON","stringify","code","open","maskClosable","closable","bodyStyle","padding","width","footer","centered","Logo","onFinish","initialValues","name","rules","required","prefix","UserOutlined","placeholder","LockOutlined","htmlType","block","loading","wrapperCol","span","onClick","baseUrl","getHeader","Authorization","getItem","auth","URL","fetch","method","headers","body","then","response","json","get","post","put","delete"],"sourceRoot":""}